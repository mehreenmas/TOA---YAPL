
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALleftEQUALEQUALNOTEQUALnonassocLESSTHANLESSEQUALGREATERTHANGREATEREQUALleftPLUSMINUSleftMULTIPLYDIVIDEMODleftPOWERrightNOTnonassocINCRDECRnonassocLBRACRBRACAND BOOL CHAR CLBRAC COLON COMMA CRBRAC DECR DIVIDE DOT ELSE ELSEIF EQUAL EQUALEQUAL FATARROW FLOAT GREATEREQUAL GREATERTHAN IF INCR INDEX INT LBRAC LESSEQUAL LESSTHAN MINUS MOD MULTIPLY NAME NOT NOTEQUAL OR PLUS POP POWER PRINT PUSH RBRAC SEMICOLON SLBRAC SLICE SRBRAC STRING TYPE\n\tlines : last SEMICOLON\n\t\t  | last SEMICOLON lines\n\t\n\tlast : codestmt \n\t\t | output \n\t\t | list\n\t\t | var_assign \n\t\t | var_declare \n\t\t | if_exp \n\t\t | empty\n\n\t\n\tlist : list_declare\n\t\t | list_assign\n\t\t | list_access\n\t\t | list_funcs\n\t\n\tlist_declare : NAME FATARROW SLBRAC SRBRAC\n\t\n\tlist_assign : NAME EQUAL SLBRAC result SRBRAC\n\t\n\tlist_access : NAME SLBRAC INT SRBRAC\n\t\n\tlist_funcs : list_pop\n\t\t\t   | list_push\n\t\t\t   | list_slice\n\t\t\t   | list_index\n\t\n\tlist_pop : NAME DOT POP LBRAC INT RBRAC\n\t\n\tlist_push : NAME DOT PUSH LBRAC INT RBRAC\n\t\t\t  | NAME DOT PUSH LBRAC FLOAT RBRAC\n\t\t\t  | NAME DOT PUSH LBRAC CHAR RBRAC\n\t\t\t  | NAME DOT PUSH LBRAC STRING RBRAC\n\t\t\t  | NAME DOT PUSH LBRAC BOOL RBRAC\n\t\n\tlist_slice : NAME DOT SLICE LBRAC sliceval RBRAC\n\t\n\tsliceval : INT COLON\n\t         | COLON INT\n\t\t\t | INT COLON INT\n\t\t\t | COLON\n\t\n\tlist_index : NAME DOT INDEX LBRAC INT RBRAC\n\t\n\tif_exp : if_statement\n\t\t   | if_statement else_statement\n\t\t   | if_statement elif_stmt\n\t\t   | if_statement elif_stmt else_statement\n\t\n\tif_statement : IF LBRAC codestmt RBRAC block\n\t\n\telse_statement : ELSE block\n\t\n\telif_stmt : else_if_statement\n\t\t\t  | else_if_statement elif_stmt\n\t\n\telse_if_statement : ELSEIF LBRAC codestmt RBRAC block\n\t\n\tblock : CLBRAC codeblock CRBRAC\n\t\n\tcodeblock : code SEMICOLON\n\t\t\t  | code SEMICOLON codeblock\n\t\n\tcode : codestmt\n\t\t | var_assign\n\t\t | var_declare\n\t\t | output\n\t\t | list\n\t\t | if_exp\n\t\n\toutput : PRINT LBRAC result RBRAC\n\t\n\tresult : printstmt\n\t\t   | printstmt COMMA result\n\t\t   | list_access \n\t\t   | list_access COMMA result\n\t\t   | list_funcs\n\t\t   | list_funcs COMMA result\n\t\n\tprintstmt : codestmt\n\t\n\tvar_assign : NAME EQUAL codestmt\n\t\n    var_declare : TYPE NAME\n                | TYPE NAME EQUAL codestmt\n    \n\tempty :\n\t\n\tcodestmt : MINUS codestmt\n\t\n\tcodestmt : codestmt PLUS codestmt\n\t\t\t | codestmt MINUS codestmt\n\t\t\t | codestmt MULTIPLY codestmt\n\t\t\t | codestmt DIVIDE codestmt\n\t\t\t | codestmt MOD codestmt\n\t\t\t | codestmt POWER codestmt\t\t   \n\n\t\n\tcodestmt : list_funcs PLUS codestmt\n\t\t\t | list_funcs MINUS codestmt\n\t\t\t | list_funcs MULTIPLY codestmt\n\t\t\t | list_funcs DIVIDE codestmt\n\t\t\t | list_funcs MOD codestmt\n\t\t\t | list_funcs POWER codestmt\n\t\t\t | codestmt PLUS list_funcs\n\t\t\t | codestmt MINUS list_funcs\n\t\t\t | codestmt MULTIPLY list_funcs\n\t\t\t | codestmt DIVIDE list_funcs\n\t\t\t | codestmt MOD list_funcs\n\t\t\t | codestmt POWER list_funcs\t\t\t\t   \n\n\t\n\tcodestmt : codestmt LESSTHAN codestmt\n\t\t\t | codestmt GREATERTHAN codestmt\n\t\t\t | codestmt LESSEQUAL codestmt\n\t\t\t | codestmt GREATEREQUAL codestmt\n\t\t\t | codestmt NOTEQUAL codestmt\n\t\t\t | codestmt EQUALEQUAL codestmt\n\t\t\t | codestmt AND codestmt\n\t\t\t | codestmt OR codestmt\n\t\n\tcodestmt : LBRAC codestmt RBRAC\n\t\n\tcodestmt : NOT codestmt\n\t\n\tcodestmt : codestmt INCR\n\t\n\tcodestmt : codestmt DECR\n\t\n\tcodestmt : NAME\n\t\n\tcodestmt : BOOL\n\t\n\tcodestmt : CHAR\n\t\n\tcodestmt : STRING\n\t\n\tcodestmt : INT\n\t\t\t | FLOAT\n\t'
    
_lr_action_items = {'MINUS':([0,3,10,11,12,13,14,15,16,17,18,19,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,63,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,110,111,112,113,116,118,119,128,129,130,131,134,140,157,160,161,162,163,164,165,166,169,],[10,33,10,52,10,10,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-92,-93,-63,52,-94,10,10,10,10,10,10,33,-91,10,10,10,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,33,33,33,33,33,33,33,33,-70,-71,-72,-73,-74,-75,-90,33,10,52,33,-94,10,10,10,33,10,10,10,33,33,33,10,-21,-22,-23,-24,-25,-26,-27,-32,]),'LBRAC':([0,10,12,13,20,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,63,69,70,100,103,104,105,106,113,116,118,128,129,130,157,],[12,12,12,12,63,70,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,118,12,12,123,124,125,126,12,12,12,12,12,12,12,]),'NOT':([0,10,12,13,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,63,70,100,113,116,118,128,129,130,157,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'NAME':([0,10,12,13,24,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,63,70,100,113,116,118,128,129,130,157,],[14,50,50,50,64,14,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,112,50,112,50,14,50,112,112,112,14,]),'BOOL':([0,10,12,13,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,63,70,100,113,116,118,124,128,129,130,157,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,148,15,15,15,15,]),'CHAR':([0,10,12,13,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,63,70,100,113,116,118,124,128,129,130,157,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,146,16,16,16,16,]),'STRING':([0,10,12,13,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,63,70,100,113,116,118,124,128,129,130,157,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,147,17,17,17,17,]),'INT':([0,10,12,13,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,61,63,70,100,113,116,118,123,124,125,126,128,129,130,151,157,167,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,102,18,18,18,18,18,18,143,144,150,152,18,18,18,168,18,172,]),'FLOAT':([0,10,12,13,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,63,70,100,113,116,118,124,128,129,130,157,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,145,19,19,19,19,]),'PRINT':([0,31,116,157,],[20,20,20,20,]),'TYPE':([0,31,116,157,],[24,24,24,24,]),'SEMICOLON':([0,2,3,4,5,6,7,8,9,11,14,15,16,17,18,19,21,22,23,25,26,27,28,29,31,46,47,48,50,58,64,65,66,68,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,114,115,117,121,122,127,131,133,134,135,136,137,138,139,142,156,159,160,161,162,163,164,165,166,169,171,],[-62,31,-3,-4,-5,-6,-7,-8,-9,-13,-94,-95,-96,-97,-98,-99,-10,-11,-12,-33,-17,-18,-19,-20,-62,-92,-93,-63,-94,-91,-60,-34,-35,-39,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,-82,-83,-84,-85,-86,-87,-88,-89,-70,-71,-72,-73,-74,-75,-90,-59,-36,-38,-40,-14,-16,-51,-61,157,-45,-46,-47,-48,-49,-50,-15,-42,-37,-21,-22,-23,-24,-25,-26,-27,-32,-41,]),'IF':([0,31,116,157,],[30,30,30,30,]),'$end':([1,31,71,],[0,-1,-2,]),'PLUS':([3,11,14,15,16,17,18,19,26,27,28,29,46,47,48,49,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[32,51,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,-63,51,-94,32,-91,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,32,32,32,32,32,32,32,32,-70,-71,-72,-73,-74,-75,-90,32,51,32,-94,32,32,32,32,-21,-22,-23,-24,-25,-26,-27,-32,]),'MULTIPLY':([3,11,14,15,16,17,18,19,26,27,28,29,46,47,48,49,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[34,53,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,34,53,-94,34,-91,34,53,34,53,-66,-78,-67,-79,-68,-80,-69,-81,34,34,34,34,34,34,34,34,34,34,-72,-73,-74,-75,-90,34,53,34,-94,34,34,34,34,-21,-22,-23,-24,-25,-26,-27,-32,]),'DIVIDE':([3,11,14,15,16,17,18,19,26,27,28,29,46,47,48,49,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[35,54,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,35,54,-94,35,-91,35,54,35,54,-66,-78,-67,-79,-68,-80,-69,-81,35,35,35,35,35,35,35,35,35,35,-72,-73,-74,-75,-90,35,54,35,-94,35,35,35,35,-21,-22,-23,-24,-25,-26,-27,-32,]),'MOD':([3,11,14,15,16,17,18,19,26,27,28,29,46,47,48,49,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[36,55,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,36,55,-94,36,-91,36,55,36,55,-66,-78,-67,-79,-68,-80,-69,-81,36,36,36,36,36,36,36,36,36,36,-72,-73,-74,-75,-90,36,55,36,-94,36,36,36,36,-21,-22,-23,-24,-25,-26,-27,-32,]),'POWER':([3,11,14,15,16,17,18,19,26,27,28,29,46,47,48,49,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,110,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[37,56,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,37,56,-94,37,-91,37,56,37,56,37,56,37,56,37,56,-69,-81,37,37,37,37,37,37,37,37,37,37,37,37,37,-75,-90,37,56,37,-94,37,37,37,37,-21,-22,-23,-24,-25,-26,-27,-32,]),'LESSTHAN':([3,14,15,16,17,18,19,26,27,28,29,46,47,48,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[38,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,-63,-94,38,-91,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,None,None,None,None,38,38,38,38,-70,-71,-72,-73,-74,-75,-90,38,38,-94,38,38,38,38,-21,-22,-23,-24,-25,-26,-27,-32,]),'GREATERTHAN':([3,14,15,16,17,18,19,26,27,28,29,46,47,48,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[39,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,-63,-94,39,-91,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,None,None,None,None,39,39,39,39,-70,-71,-72,-73,-74,-75,-90,39,39,-94,39,39,39,39,-21,-22,-23,-24,-25,-26,-27,-32,]),'LESSEQUAL':([3,14,15,16,17,18,19,26,27,28,29,46,47,48,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[40,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,-63,-94,40,-91,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,None,None,None,None,40,40,40,40,-70,-71,-72,-73,-74,-75,-90,40,40,-94,40,40,40,40,-21,-22,-23,-24,-25,-26,-27,-32,]),'GREATEREQUAL':([3,14,15,16,17,18,19,26,27,28,29,46,47,48,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[41,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,-63,-94,41,-91,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,None,None,None,None,41,41,41,41,-70,-71,-72,-73,-74,-75,-90,41,41,-94,41,41,41,41,-21,-22,-23,-24,-25,-26,-27,-32,]),'NOTEQUAL':([3,14,15,16,17,18,19,26,27,28,29,46,47,48,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[42,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,-63,-94,42,-91,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,-82,-83,-84,-85,-86,-87,42,42,-70,-71,-72,-73,-74,-75,-90,42,42,-94,42,42,42,42,-21,-22,-23,-24,-25,-26,-27,-32,]),'EQUALEQUAL':([3,14,15,16,17,18,19,26,27,28,29,46,47,48,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[43,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,-63,-94,43,-91,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,-82,-83,-84,-85,-86,-87,43,43,-70,-71,-72,-73,-74,-75,-90,43,43,-94,43,43,43,43,-21,-22,-23,-24,-25,-26,-27,-32,]),'AND':([3,14,15,16,17,18,19,26,27,28,29,46,47,48,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[44,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,-63,-94,44,-91,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,-82,-83,-84,-85,-86,-87,-88,44,-70,-71,-72,-73,-74,-75,-90,44,44,-94,44,44,44,44,-21,-22,-23,-24,-25,-26,-27,-32,]),'OR':([3,14,15,16,17,18,19,26,27,28,29,46,47,48,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[45,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,-63,-94,45,-91,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,-82,-83,-84,-85,-86,-87,-88,-89,-70,-71,-72,-73,-74,-75,-90,45,45,-94,45,45,45,45,-21,-22,-23,-24,-25,-26,-27,-32,]),'INCR':([3,14,15,16,17,18,19,26,27,28,29,46,47,48,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[46,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,46,-94,46,46,46,-76,46,-77,46,-78,46,-79,46,-80,46,-81,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-90,46,46,-94,46,46,46,46,-21,-22,-23,-24,-25,-26,-27,-32,]),'DECR':([3,14,15,16,17,18,19,26,27,28,29,46,47,48,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,111,112,119,131,134,140,160,161,162,163,164,165,166,169,],[47,-94,-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,47,-94,47,47,47,-76,47,-77,47,-78,47,-79,47,-80,47,-81,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-90,47,47,-94,47,47,47,47,-21,-22,-23,-24,-25,-26,-27,-32,]),'EQUAL':([14,64,],[59,113,]),'FATARROW':([14,],[60,]),'SLBRAC':([14,59,60,112,],[61,100,101,61,]),'DOT':([14,50,112,],[62,62,62,]),'RBRAC':([15,16,17,18,19,26,27,28,29,46,47,48,50,57,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,107,108,109,110,111,112,119,122,140,143,144,145,146,147,148,149,151,152,153,154,155,160,161,162,163,164,165,166,167,168,169,172,],[-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,-63,-94,98,-91,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,-82,-83,-84,-85,-86,-87,-88,-89,-70,-71,-72,-73,-74,-75,-90,127,-52,-54,-56,-58,-94,141,-16,158,160,161,162,163,164,165,166,-31,169,-53,-55,-57,-21,-22,-23,-24,-25,-26,-27,-28,-29,-32,-30,]),'COMMA':([15,16,17,18,19,26,27,28,29,46,47,48,50,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,108,109,110,111,112,122,160,161,162,163,164,165,166,169,],[-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,-63,-94,-91,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,-82,-83,-84,-85,-86,-87,-88,-89,-70,-71,-72,-73,-74,-75,-90,128,129,130,-58,-94,-16,-21,-22,-23,-24,-25,-26,-27,-32,]),'SRBRAC':([15,16,17,18,19,26,27,28,29,46,47,48,50,58,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,102,108,109,110,111,112,120,122,153,154,155,160,161,162,163,164,165,166,169,],[-95,-96,-97,-98,-99,-17,-18,-19,-20,-92,-93,-63,-94,-91,-64,-76,-65,-77,-66,-78,-67,-79,-68,-80,-69,-81,-82,-83,-84,-85,-86,-87,-88,-89,-70,-71,-72,-73,-74,-75,-90,121,122,-52,-54,-56,-58,-94,142,-16,-53,-55,-57,-21,-22,-23,-24,-25,-26,-27,-32,]),'ELSE':([25,66,68,117,156,159,171,],[67,67,-39,-40,-42,-37,-41,]),'ELSEIF':([25,68,156,159,171,],[69,69,-42,-37,-41,]),'POP':([62,],[103,]),'PUSH':([62,],[104,]),'SLICE':([62,],[105,]),'INDEX':([62,],[106,]),'CLBRAC':([67,141,158,],[116,116,116,]),'COLON':([125,150,],[151,167,]),'CRBRAC':([132,157,170,],[156,-43,-44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'lines':([0,31,],[1,71,]),'last':([0,31,],[2,2,]),'codestmt':([0,10,12,13,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,63,70,100,113,116,118,128,129,130,157,],[3,48,57,58,3,72,74,76,78,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,111,119,111,131,134,140,111,111,111,134,]),'output':([0,31,116,157,],[4,4,137,137,]),'list':([0,31,116,157,],[5,5,138,138,]),'var_assign':([0,31,116,157,],[6,6,135,135,]),'var_declare':([0,31,116,157,],[7,7,136,136,]),'if_exp':([0,31,116,157,],[8,8,139,139,]),'empty':([0,31,],[9,9,]),'list_funcs':([0,10,12,13,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,63,70,100,113,116,118,128,129,130,157,],[11,49,49,49,11,73,75,77,79,81,83,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,110,49,110,49,11,49,110,110,110,11,]),'list_declare':([0,31,116,157,],[21,21,21,21,]),'list_assign':([0,31,116,157,],[22,22,22,22,]),'list_access':([0,31,63,100,116,128,129,130,157,],[23,23,109,109,23,109,109,109,23,]),'if_statement':([0,31,116,157,],[25,25,25,25,]),'list_pop':([0,10,12,13,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,63,70,100,113,116,118,128,129,130,157,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'list_push':([0,10,12,13,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,63,70,100,113,116,118,128,129,130,157,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'list_slice':([0,10,12,13,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,63,70,100,113,116,118,128,129,130,157,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'list_index':([0,10,12,13,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,59,63,70,100,113,116,118,128,129,130,157,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'else_statement':([25,66,],[65,114,]),'elif_stmt':([25,68,],[66,117,]),'else_if_statement':([25,68,],[68,68,]),'result':([63,100,128,129,130,],[107,120,153,154,155,]),'printstmt':([63,100,128,129,130,],[108,108,108,108,108,]),'block':([67,141,158,],[115,159,171,]),'codeblock':([116,157,],[132,170,]),'code':([116,157,],[133,133,]),'sliceval':([125,],[149,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> lines","S'",1,None,None,None),
  ('lines -> last SEMICOLON','lines',2,'p_line','parser.py',21),
  ('lines -> last SEMICOLON lines','lines',3,'p_line','parser.py',22),
  ('last -> codestmt','last',1,'p_last','parser.py',33),
  ('last -> output','last',1,'p_last','parser.py',34),
  ('last -> list','last',1,'p_last','parser.py',35),
  ('last -> var_assign','last',1,'p_last','parser.py',36),
  ('last -> var_declare','last',1,'p_last','parser.py',37),
  ('last -> if_exp','last',1,'p_last','parser.py',38),
  ('last -> empty','last',1,'p_last','parser.py',39),
  ('list -> list_declare','list',1,'p_list','parser.py',46),
  ('list -> list_assign','list',1,'p_list','parser.py',47),
  ('list -> list_access','list',1,'p_list','parser.py',48),
  ('list -> list_funcs','list',1,'p_list','parser.py',49),
  ('list_declare -> NAME FATARROW SLBRAC SRBRAC','list_declare',4,'p_list_declare','parser.py',55),
  ('list_assign -> NAME EQUAL SLBRAC result SRBRAC','list_assign',5,'p_list_assign','parser.py',61),
  ('list_access -> NAME SLBRAC INT SRBRAC','list_access',4,'p_list_access','parser.py',67),
  ('list_funcs -> list_pop','list_funcs',1,'p_list_funcs','parser.py',73),
  ('list_funcs -> list_push','list_funcs',1,'p_list_funcs','parser.py',74),
  ('list_funcs -> list_slice','list_funcs',1,'p_list_funcs','parser.py',75),
  ('list_funcs -> list_index','list_funcs',1,'p_list_funcs','parser.py',76),
  ('list_pop -> NAME DOT POP LBRAC INT RBRAC','list_pop',6,'p_list_pop','parser.py',82),
  ('list_push -> NAME DOT PUSH LBRAC INT RBRAC','list_push',6,'p_list_push','parser.py',88),
  ('list_push -> NAME DOT PUSH LBRAC FLOAT RBRAC','list_push',6,'p_list_push','parser.py',89),
  ('list_push -> NAME DOT PUSH LBRAC CHAR RBRAC','list_push',6,'p_list_push','parser.py',90),
  ('list_push -> NAME DOT PUSH LBRAC STRING RBRAC','list_push',6,'p_list_push','parser.py',91),
  ('list_push -> NAME DOT PUSH LBRAC BOOL RBRAC','list_push',6,'p_list_push','parser.py',92),
  ('list_slice -> NAME DOT SLICE LBRAC sliceval RBRAC','list_slice',6,'p_list_slice','parser.py',99),
  ('sliceval -> INT COLON','sliceval',2,'p_list_slice_val','parser.py',105),
  ('sliceval -> COLON INT','sliceval',2,'p_list_slice_val','parser.py',106),
  ('sliceval -> INT COLON INT','sliceval',3,'p_list_slice_val','parser.py',107),
  ('sliceval -> COLON','sliceval',1,'p_list_slice_val','parser.py',108),
  ('list_index -> NAME DOT INDEX LBRAC INT RBRAC','list_index',6,'p_list_index','parser.py',122),
  ('if_exp -> if_statement','if_exp',1,'p_ifexp','parser.py',128),
  ('if_exp -> if_statement else_statement','if_exp',2,'p_ifexp','parser.py',129),
  ('if_exp -> if_statement elif_stmt','if_exp',2,'p_ifexp','parser.py',130),
  ('if_exp -> if_statement elif_stmt else_statement','if_exp',3,'p_ifexp','parser.py',131),
  ('if_statement -> IF LBRAC codestmt RBRAC block','if_statement',5,'p_ifstmt','parser.py',142),
  ('else_statement -> ELSE block','else_statement',2,'p_else','parser.py',148),
  ('elif_stmt -> else_if_statement','elif_stmt',1,'p_elif','parser.py',154),
  ('elif_stmt -> else_if_statement elif_stmt','elif_stmt',2,'p_elif','parser.py',155),
  ('else_if_statement -> ELSEIF LBRAC codestmt RBRAC block','else_if_statement',5,'p_elseif','parser.py',165),
  ('block -> CLBRAC codeblock CRBRAC','block',3,'p_block','parser.py',171),
  ('codeblock -> code SEMICOLON','codeblock',2,'p_codeblock','parser.py',177),
  ('codeblock -> code SEMICOLON codeblock','codeblock',3,'p_codeblock','parser.py',178),
  ('code -> codestmt','code',1,'p_code','parser.py',187),
  ('code -> var_assign','code',1,'p_code','parser.py',188),
  ('code -> var_declare','code',1,'p_code','parser.py',189),
  ('code -> output','code',1,'p_code','parser.py',190),
  ('code -> list','code',1,'p_code','parser.py',191),
  ('code -> if_exp','code',1,'p_code','parser.py',192),
  ('output -> PRINT LBRAC result RBRAC','output',4,'p_print','parser.py',198),
  ('result -> printstmt','result',1,'p_result','parser.py',204),
  ('result -> printstmt COMMA result','result',3,'p_result','parser.py',205),
  ('result -> list_access','result',1,'p_result','parser.py',206),
  ('result -> list_access COMMA result','result',3,'p_result','parser.py',207),
  ('result -> list_funcs','result',1,'p_result','parser.py',208),
  ('result -> list_funcs COMMA result','result',3,'p_result','parser.py',209),
  ('printstmt -> codestmt','printstmt',1,'p_printstmt','parser.py',219),
  ('var_assign -> NAME EQUAL codestmt','var_assign',3,'p_var_assign','parser.py',225),
  ('var_declare -> TYPE NAME','var_declare',2,'p_var_declare','parser.py',231),
  ('var_declare -> TYPE NAME EQUAL codestmt','var_declare',4,'p_var_declare','parser.py',232),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',242),
  ('codestmt -> MINUS codestmt','codestmt',2,'p_negative_num','parser.py',247),
  ('codestmt -> codestmt PLUS codestmt','codestmt',3,'p_codestmt_operands','parser.py',253),
  ('codestmt -> codestmt MINUS codestmt','codestmt',3,'p_codestmt_operands','parser.py',254),
  ('codestmt -> codestmt MULTIPLY codestmt','codestmt',3,'p_codestmt_operands','parser.py',255),
  ('codestmt -> codestmt DIVIDE codestmt','codestmt',3,'p_codestmt_operands','parser.py',256),
  ('codestmt -> codestmt MOD codestmt','codestmt',3,'p_codestmt_operands','parser.py',257),
  ('codestmt -> codestmt POWER codestmt','codestmt',3,'p_codestmt_operands','parser.py',258),
  ('codestmt -> list_funcs PLUS codestmt','codestmt',3,'p_codestmt_list','parser.py',265),
  ('codestmt -> list_funcs MINUS codestmt','codestmt',3,'p_codestmt_list','parser.py',266),
  ('codestmt -> list_funcs MULTIPLY codestmt','codestmt',3,'p_codestmt_list','parser.py',267),
  ('codestmt -> list_funcs DIVIDE codestmt','codestmt',3,'p_codestmt_list','parser.py',268),
  ('codestmt -> list_funcs MOD codestmt','codestmt',3,'p_codestmt_list','parser.py',269),
  ('codestmt -> list_funcs POWER codestmt','codestmt',3,'p_codestmt_list','parser.py',270),
  ('codestmt -> codestmt PLUS list_funcs','codestmt',3,'p_codestmt_list','parser.py',271),
  ('codestmt -> codestmt MINUS list_funcs','codestmt',3,'p_codestmt_list','parser.py',272),
  ('codestmt -> codestmt MULTIPLY list_funcs','codestmt',3,'p_codestmt_list','parser.py',273),
  ('codestmt -> codestmt DIVIDE list_funcs','codestmt',3,'p_codestmt_list','parser.py',274),
  ('codestmt -> codestmt MOD list_funcs','codestmt',3,'p_codestmt_list','parser.py',275),
  ('codestmt -> codestmt POWER list_funcs','codestmt',3,'p_codestmt_list','parser.py',276),
  ('codestmt -> codestmt LESSTHAN codestmt','codestmt',3,'p_codestmt_comparison','parser.py',282),
  ('codestmt -> codestmt GREATERTHAN codestmt','codestmt',3,'p_codestmt_comparison','parser.py',283),
  ('codestmt -> codestmt LESSEQUAL codestmt','codestmt',3,'p_codestmt_comparison','parser.py',284),
  ('codestmt -> codestmt GREATEREQUAL codestmt','codestmt',3,'p_codestmt_comparison','parser.py',285),
  ('codestmt -> codestmt NOTEQUAL codestmt','codestmt',3,'p_codestmt_comparison','parser.py',286),
  ('codestmt -> codestmt EQUALEQUAL codestmt','codestmt',3,'p_codestmt_comparison','parser.py',287),
  ('codestmt -> codestmt AND codestmt','codestmt',3,'p_codestmt_comparison','parser.py',288),
  ('codestmt -> codestmt OR codestmt','codestmt',3,'p_codestmt_comparison','parser.py',289),
  ('codestmt -> LBRAC codestmt RBRAC','codestmt',3,'p_codestmt_brac','parser.py',295),
  ('codestmt -> NOT codestmt','codestmt',2,'p_codestmt_not','parser.py',301),
  ('codestmt -> codestmt INCR','codestmt',2,'p_codestmt_INCR','parser.py',307),
  ('codestmt -> codestmt DECR','codestmt',2,'p_codestmt_DECR','parser.py',313),
  ('codestmt -> NAME','codestmt',1,'p_codestmt_var','parser.py',319),
  ('codestmt -> BOOL','codestmt',1,'p_codestmt_bool','parser.py',325),
  ('codestmt -> CHAR','codestmt',1,'p_codestmt_char','parser.py',331),
  ('codestmt -> STRING','codestmt',1,'p_codestmt_string','parser.py',337),
  ('codestmt -> INT','codestmt',1,'p_codestmt_digits','parser.py',344),
  ('codestmt -> FLOAT','codestmt',1,'p_codestmt_digits','parser.py',345),
]
